#!/bin/bash
# Created by: WestleyR
# Email: westleyr@nym.hush.com
# Url: https://github.com/WestleyR/gpack
# Last modified date: 2020-07-29
#
# This file is licensed under the terms of
#
# The Clear BSD License
#
# Copyright (c) 2019-2020 WestleyR
# All rights reserved.
#
# This software is licensed under a Clear BSD License.
#

set -e

# If debug
if [ ! -z $GPACK_DEBUG ]; then
  set -x
fi

install_dir=${HOME}/.local

if [ -z $1 ]; then
  echo "No script to install"
  exit 1
fi

verify_package() {
  checksum="$1"
  packagefile="$2"

  if [ ! -z "$checksum" ]; then
    if ! command -v sha256sum > /dev/null; then
      echo "WARNING: sha256sum command not found; skipping"
    else
      if ! echo "$checksum  ${packagefile}" | sha256sum -c > /dev/null; then
        echo "ERROR: sha256sum verify failed; hashes differ"
        return 1
      else
        echo "${packagefile} sha256sum OK"
      fi
    fi
  else
    echo "WARNING: ${packagefile} unverifyied"
  fi
}

cache_dir=""
download_pkg() {
  pkg="$1" # eg. WestleyR/list-files
  pkg_v="$2" # 1.6.0
  pkg_url="$3"
  pkg_sha256="$4"

  if [ -z "$pkg_url" ]; then
    echo "ERROR: no url to download from"
    echo "please open an issue at: https://github.com/${USR_NAME}/${PKG_NAME}"
    exit 1;
  fi

  cache_dir="${HOME}/.cache/gpack.cache/${pkg}/${pkg_v}"
  mkdir -p $cache_dir
  cache_dir="${cache_dir}/package.tar.gz"

  # First, check if we already cached the file
  if ! test -f $cache_dir ; then
    echo "I: Donwload package..."
    if ! wget -q --show-progress -O $cache_dir $pkg_url ; then
      echo "ERROR: failed to download tarball from: $pkg_url"
      echo "Trying to build from source..."
      build_source
      exit 0
    fi
  else
    echo "I: Using cached file: ${cache_dir}"
  fi

  if [ ! -z "$pkg_sha256" ]; then
    if ! verify_package $pkg_sha256 $cache_dir ; then
      echo "I: Redownload package since checksums did not match..."
      rm -f $cache_dir

      # redownload the file
      echo "I: Donwload package..."
      if ! wget -q --show-progress -O $cache_dir $pkg_url ; then
        echo "ERROR: failed to download tarball from: $pkg_url"
        echo "Trying to build from source..."
        build_source
        exit 0
      fi

      # Verify the package again
      if ! verify_package $pkg_sha256 $cache_dir ; then
        exit 1
      fi
    fi
  fi
}

install_deps() {
  DEP_PKGS="$1"

  if [ ! -z "${DEP_PKGS}" ]; then
    echo "I: Installing dependencies: ${DEP_PKGS}..."
    for d in ${DEP_PKGS}; do
      if ! gpack install $d ; then
        echo "ERROR: Failed to install deps: ${d}"
        exit 1
      fi
    done
  fi
}

install_files() {
  mkdir -p ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/bin
  mkdir -p ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/lib
  mkdir -p ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/include

  echo "I: Copying files..."

  if test -d ${gpack_prefix}/bin; then
    for e in $(ls -1 ${gpack_prefix}/bin); do
      cp -f ${gpack_prefix}/bin/$e ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/bin
    done
  fi

  if test -d ${gpack_prefix}/lib; then
    for l in $(ls -1 ${gpack_prefix}/lib); do
      cp -f ${gpack_prefix}/lib/$l ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/lib
    done
  fi

  if test -d ${gpack_prefix}/include; then
    for h in $(ls -1 ${gpack_prefix}/include); do
      cp -f ${gpack_prefix}/include/$h ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/include
    done
  fi

  echo "I: Installing files..."
  mkdir -p ${install_dir}/bin
  mkdir -p ${install_dir}/lib
  mkdir -p ${install_dir}/include
  mkdir -p ${install_dir}/etc
  # TODO: handle etc dir

  installed_files=0

  for e in $(ls -1 ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/bin); do
    if [ -z $GPACK_OVERIDE ]; then
      if test -e "${install_dir}/bin/${e}"; then
        echo "ERROR: ${e} already exists in ${install_dir}"
        exit 1
      fi
    fi
    ln -f -s "${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/bin/$e" ${install_dir}/bin
    ((installed_files+=1))
  done

  for l in $(ls -1 ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/lib); do
    if [ -z $GPACK_OVERIDE ]; then
      if test -e "${install_dir}/lib/${l}"; then
        echo "ERROR: ${l} already exists in ${install_dir}"
        exit 1
      fi
    fi
    ln -f -s "${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/lib/$l" ${install_dir}/lib
    ((installed_files+=1))
  done

  for h in $(ls -1 ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/include); do
    if [ -z $GPACK_OVERIDE ]; then
      if test -e "${install_dir}/include/${h}"; then
        echo "ERROR: ${h} already exists in ${install_dir}"
        exit 1
      fi
    fi
    ln -f -s "${HOME}/.gpack/installed/${USR_NAME}/${NAME}/${PKG_VERSION}/include/$h" ${install_dir}/include
    ((installed_files+=1))
  done

  echo $PKG_VERSION > ${HOME}/.gpack/installed/${USR_NAME}/${NAME}/version.gpack

  echo "I: There are ${installed_files} newly files installed"

  if [ $installed_files -eq 0 ]; then
    echo
    echo "ERROR: No files were installed; please open a issue at: https://github.com/${USR_NAME}/${NAME} or: https://github.com/WestleyR/gpack"
    echo "Try installing ${PKG_NAME} with the '--compile' flag; eg:"
    echo "  $ gpack install ${USR_NAME}/${PKG_NAME}"
    echo
    exit 1
  fi

  if [ ! -z "${INSTALL_NOTES}" ]; then
    echo
    echo "There is a install note from ${PKG_NAME}:"
    echo
    echo "${INSTALL_NOTES}"
  fi

  if [ ! -z "${NOTES}" ]; then
    echo
    echo "There is a note from ${PKG_NAME}:"
    echo
    echo "${NOTES}"
  fi
}

build_source() {
  echo "I: Compiling from source..."
  if [ -z "${TARBALL}" ]; then
    if [ -z "${RAW_FILE}" ]; then
      echo "ERROR: nothing to download; please open a issue at: ${USERNAME}/${PKG_NAME}"
      exit 1
    fi
  fi

  # TODO: fix somthing with single file install
#  url="${TARBALL}"
#  if [ ! -z "${RAW_FILE}" ]; then
#    echo "I: Installing single file..."
#
#    url="${RAW_FILE}"
#
#    packagefile="${NAME}"
#    raw_file=1
#  fi

  # Download the package, or used the cached one
  download_pkg "${USR_NAME}/${PKG_NAME}" "${PKG_VERSION}" "${TARBALL}" ${SHA256SUM}


#  if [ -z "$raw_file" ]; then
#    tar -xf ${gpack_prefix}/package.tar.gz -C ${gpack_prefix}
#    cd ${gpack_prefix}/${UNTAR_DIR}
#  else
#    cd ${gpack_prefix}
#  fi

  tar -xf $cache_dir -C ${gpack_prefix}
  cd ${gpack_prefix}/${UNTAR_DIR}

  # Install the deps (if any)
  install_deps ${DEP_PKGS}

  if [ ! -z "${INSTALL_CMD}" ]; then
    # Use 'sh -c' so we can have '&&' in the install command
    if ! sh -c "${INSTALL_CMD}" &> ${build_log} ; then
      echo
      echo "ERROR: failed to run install command"
      echo "last 10 lines from: ${build_log}"
      echo
      tail ${build_log}
      echo
      exit 1
    fi
  else
    echo "ERROR: No install command"
    echo "Please open a issue at https://github.com/WestleyR/gpack, or https://github.com/${USR_NAME}/${PKG_NAME}"
    exit 1
  fi

  # Install the files
  install_files

  exit 0
}

build_compiled() {
  echo "I: Installing prebuilt binaries..."
  if [ ! -z "${PREBUILT_URL}" ]; then
    if [ ! -z "${DEP_PKGS}" ]; then
      echo "I: Installing dependencies: ${DEP_PKGS}..."
      for d in ${DEP_PKGS}; do
        if ! gpack install $d ; then
          echo "ERROR: Failed to install deps: ${d}"
          exit 1
        fi
      done
    fi

    # Download the package, or used the cached one
    download_pkg "${USR_NAME}/${PKG_NAME}" "${PKG_VERSION}" "${PREBUILT_URL}" ${PREBUILT_SHA256SUM}

    mkdir -p ${HOME}/.gpack/installed/${USR_NAME}
    tar -xf $cache_dir -C ${HOME}/.gpack/installed/${USR_NAME}

    install_files

    exit 0
  else
    build_source
  fi
}

# get the pkg
source $1

build_log=${gpack_prefix}/build.log

if [ -z ${GPACK_ARCH} ]; then
  echo "WARNING: \$GPACK_ARCH is not set; see https://github.com/WestleyR/gpack for help"
  echo "WARNING: Cant get prebuilt binaries for a unset arch"
  build_compiled
  exit 0
elif [ ! -z ${GPACK_COMPILE_BUILD} ]; then
  build_source
  exit 0
fi

if [[ "${GPACK_ARCH}" = "x86_64_linux" ]]; then
  PREBUILT_URL="${X86_64_LINUX_URL}"
  PREBUILT_SHA256SUM="${X86_64_LINUX_SHA256SUM}"
elif [[ "${GPACK_ARCH}" = "macos" ]]; then
  PREBUILT_URL="${MACOS_URL}"
  PREBUILT_SHA256SUM="${MACOS_SHA256SUM}"
elif [[ "${GPACK_ARCH}" = "armv6l" ]]; then
  PREBUILT_URL="${ARMV6L_URL}"
  PREBUILT_SHA256SUM="${ARMV6L_SHA256SUM}"
elif [[ "${GPACK_ARCH}" = "armv7l" ]]; then
  PREBUILT_URL="${ARMV7L_URL}"
  PREBUILT_SHA256SUM="${ARMV7L_SHA256SUM}"
else
  echo "They are no pre-built binaries for you arch: ${GPACK_ARCH}"
  build_source
  exit 0
fi

build_compiled

# vim: tabstop=2 shiftwidth=2 expandtab autoindent softtabstop=0
